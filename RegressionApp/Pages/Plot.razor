@page "/plot"

<h3>Plots</h3>

<p>This is for plots and graphs.</p>

<LineChart @ref="lineChart" Width="800" />

@code {
    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;

    private int datasetsCount;
    private int labelsCount;

    private Random random = new();

    protected override void OnInitialized()
    {
        chartData = new ChartData { Labels = GetDefaultDataLabels(6), Datasets = GetDefaultDataSets(1) };
        lineChartOptions = new() { Responsive = true, Interaction = new Interaction { Mode = InteractionMode.Index } };
        lineChartOptions.Scales.Y!.Max = 10;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await lineChart.InitializeAsync(chartData, lineChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }


    #region Data functions

    private List<IChartDataset> GetDefaultDataSets(int numberOfDatasets)
    {
        var datasets = new List<IChartDataset>();

        for (var index = 0; index < numberOfDatasets; index++)
        {
            datasets.Add(GetRandomLineChartDataset());
        }

        return datasets;
    }

    private LineChartDataset GetRandomLineChartDataset()
    {
        var c = ColorUtility.CategoricalTwelveColors[datasetsCount].ToColor();

        datasetsCount += 1;

        return new LineChartDataset
            {
                Label = $"Team {datasetsCount}",
                Data = GetData(),
                BackgroundColor = c.ToRgbString(),
                BorderColor = c.ToRgbString(),
                BorderWidth = 2,
                HoverBorderWidth = 4,
                // PointBackgroundColor = c.ToRgbString(),
                // PointRadius = 0, // hide points
                // PointHoverRadius = 4,
            };
    }

    private List<double?> GetData()
    {
        var data = new List<double?>() { 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 };
        return data;
    }


    private List<string> GetDefaultDataLabels(int numberOfLabels)
    {
        var labels = new List<string>();
        for (var index = 0; index < numberOfLabels; index++)
        {
            labels.Add(GetNextDataLabel());
        }

        return labels;
    }

    private string GetNextDataLabel()
    {
        labelsCount += 1;
        return $"Day {labelsCount}";
    }


    #endregion Data functions

}

